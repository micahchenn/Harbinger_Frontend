{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micah\\\\Desktop\\\\Harbinger_Frontend\\\\frontend\\\\src\\\\Javascript_Pages\\\\Private_Pages\\\\Link_Account.jsx\",\n  _s = $RefreshSig$();\n/** \r\n * @file Link_Account.jsx\r\n * @author Micah Chen\r\n * @date Last Modified: 5/21/2024\r\n * @returns JSX.Element\r\n * \r\n * Description: This file contains the implementation of the Link_Account component. This component allows users to link their bank accounts\r\n * using Plaid's Link module. The linking process is initiated by sending a POST request to the server to create a link token.\r\n * \r\n * The link token is then used to open the Plaid Link module. If the user successfully links their account, the Plaid Link module\r\n * returns a public token. This public token is sent to the server to exchange it for an access token.\r\n * \r\n * The access token is used to send requests to the Plaid API to get the user's account data. If the request is successful,\r\n * the accountData state is updated with the response data.\r\n * \r\n*/\n\nimport React, { useState } from 'react';\nimport api from '../../api';\nimport { useNavigate } from 'react-router-dom';\nimport '../../Styling_Pages/Private_Pages/Link_Account.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Link_Account = () => {\n  _s();\n  const navigate = useNavigate();\n  const [accountData, setAccountData] = useState(null);\n  const [error, setError] = useState(null);\n  const [accessToken, setAccessToken] = useState(null); // Add this line\n\n  const linkAccount = async () => {\n    try {\n      const response = await api.post('plaid/create-link-token/'); // First the user sends request to the server to create a link token \n      const linkToken = response.data.link_token; // The server sends back a link token one time short lived token that is used to open the Plaid Link module\n\n      const handler = window.Plaid.create({\n        token: linkToken,\n        // The link token is passed to the Plaid Link module to open the module\n        onSuccess: async publicToken => {\n          // If the user successfully links their account, the Plaid Link module will return a public token\n          const response = await api.post('/plaid/get-access-token/', {\n            publicToken\n          }); // The public token is sent to the server to exchange it for an access token (then securely stored in server side)\n          setAccessToken(response.data.access_token); // Update this line THIS IS JUST A PLACEHOLDER FOR ALL ERROR AND STUFF\n          const accessToken = response.data.access_token; // with the access token you can send requests to the Plaid API to get the user's account data\n          //const userDataResponse = await api.post('/plaid/get-user-data/', { access_token: accessToken });\n          //setAccountData(userDataResponse.data); \n        }\n      });\n      handler.open(); // The Plaid Link module is opened \n    } catch (error) {\n      setError(error.response.data.error);\n    }\n  };\n  const [responseData, setResponseData] = useState(null);\n  const sendTestRequest = async () => {\n    try {\n      const response = await api.get('plaid/test-endpoint/');\n      setResponseData(JSON.stringify(response.data, null, 2));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"link-account\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Link Accountasd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"link-account-button\",\n      onClick: linkAccount,\n      children: \"Link Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"test-request-button\",\n      onClick: sendTestRequest,\n      children: \"Send Test Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), accessToken && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Access Token: \", accessToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }, this), \" \", responseData && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHeight: '500px',\n        overflowY: 'scroll'\n      },\n      children: responseData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }, this), accountData && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Institution ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Item ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Available Products\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Billed Products\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(Link_Account, \"dgocHosZKc07geSuV1/pHM6b2WA=\", false, function () {\n  return [useNavigate];\n});\n_c = Link_Account;\nexport default Link_Account;\nvar _c;\n$RefreshReg$(_c, \"Link_Account\");","map":{"version":3,"names":["React","useState","api","useNavigate","jsxDEV","_jsxDEV","Link_Account","_s","navigate","accountData","setAccountData","error","setError","accessToken","setAccessToken","linkAccount","response","post","linkToken","data","link_token","handler","window","Plaid","create","token","onSuccess","publicToken","access_token","open","responseData","setResponseData","sendTestRequest","get","JSON","stringify","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["C:/Users/micah/Desktop/Harbinger_Frontend/frontend/src/Javascript_Pages/Private_Pages/Link_Account.jsx"],"sourcesContent":["/** \r\n * @file Link_Account.jsx\r\n * @author Micah Chen\r\n * @date Last Modified: 5/21/2024\r\n * @returns JSX.Element\r\n * \r\n * Description: This file contains the implementation of the Link_Account component. This component allows users to link their bank accounts\r\n * using Plaid's Link module. The linking process is initiated by sending a POST request to the server to create a link token.\r\n * \r\n * The link token is then used to open the Plaid Link module. If the user successfully links their account, the Plaid Link module\r\n * returns a public token. This public token is sent to the server to exchange it for an access token.\r\n * \r\n * The access token is used to send requests to the Plaid API to get the user's account data. If the request is successful,\r\n * the accountData state is updated with the response data.\r\n * \r\n*/\r\n \r\n\r\nimport React, { useState } from 'react';\r\nimport api from '../../api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../../Styling_Pages/Private_Pages/Link_Account.css'; // Import the CSS file\r\n\r\nconst Link_Account = () => {\r\n    const navigate = useNavigate();\r\n    const [accountData, setAccountData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [accessToken, setAccessToken] = useState(null); // Add this line\r\n\r\n    const linkAccount = async () => {\r\n        try {\r\n            const response = await api.post('plaid/create-link-token/');  // First the user sends request to the server to create a link token \r\n            const linkToken = response.data.link_token; // The server sends back a link token one time short lived token that is used to open the Plaid Link module\r\n\r\n            const handler = window.Plaid.create({\r\n                token: linkToken, // The link token is passed to the Plaid Link module to open the module\r\n                onSuccess: async (publicToken) => { // If the user successfully links their account, the Plaid Link module will return a public token\r\n                    const response = await api.post('/plaid/get-access-token/', { publicToken });  // The public token is sent to the server to exchange it for an access token (then securely stored in server side)\r\n                    setAccessToken(response.data.access_token); // Update this line THIS IS JUST A PLACEHOLDER FOR ALL ERROR AND STUFF\r\n                    const accessToken = response.data.access_token; // with the access token you can send requests to the Plaid API to get the user's account data\r\n                    //const userDataResponse = await api.post('/plaid/get-user-data/', { access_token: accessToken });\r\n                    //setAccountData(userDataResponse.data); \r\n                },\r\n            });\r\n            handler.open(); // The Plaid Link module is opened \r\n        } catch (error) {\r\n            setError(error.response.data.error);\r\n        }\r\n    }\r\n\r\n    const [responseData, setResponseData] = useState(null);\r\n\r\n    const sendTestRequest = async () => {\r\n        try {\r\n            const response = await api.get('plaid/test-endpoint/');\r\n            setResponseData(JSON.stringify(response.data, null, 2));\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"link-account\">\r\n            <h1>Link Accountasd</h1>\r\n            <button className=\"link-account-button\" onClick={linkAccount}>Link Account</button>\r\n            <button className=\"test-request-button\" onClick={sendTestRequest}>Send Test Request</button>\r\n            {accessToken && <p>Access Token: {accessToken}</p>} {/* Add this line */}\r\n            {responseData && \r\n            <pre style={{ maxHeight: '500px', overflowY: 'scroll' }}>\r\n                {responseData}\r\n            </pre>\r\n        }\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {accountData && (\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Institution ID</th>\r\n                            <th>Item ID</th>\r\n                            <th>Available Products</th>\r\n                            <th>Billed Products</th>\r\n                            {/* Add more headers as needed */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {/* ...existing code... */}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Link_Account;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}